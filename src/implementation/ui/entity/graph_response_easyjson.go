// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(in *jlexer.Lexer, out *GraphResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make(Nodes, 0, 2)
					} else {
						out.Nodes = Nodes{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Node
					easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity1(in, &v1)
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make(Edges, 0, 0)
					} else {
						out.Edges = Edges{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Edge
					easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity2(in, &v2)
					out.Edges = append(out.Edges, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(out *jwriter.Writer, in GraphResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Nodes {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity1(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Edges {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity2(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GraphResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GraphResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GraphResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GraphResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity(l, v)
}
func easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity2(in *jlexer.Lexer, out *Edge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjsonA673d5caDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity2(out *jwriter.Writer, in Edge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjsonA673d5caEncode(out, in.Data)
	}
	out.RawByte('}')
}
func easyjsonA673d5caDecode(in *jlexer.Lexer, out *struct {
	Id     string `json:"id"`
	Source string `json:"source"`
	Target string `json:"target"`
	Label  string `json:"label"`
	Width  string `json:"width"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "target":
			out.Target = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "width":
			out.Width = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA673d5caEncode(out *jwriter.Writer, in struct {
	Id     string `json:"id"`
	Source string `json:"source"`
	Target string `json:"target"`
	Label  string `json:"label"`
	Width  string `json:"width"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.String(string(in.Width))
	}
	out.RawByte('}')
}
func easyjsonA673d5caDecodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity1(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjsonA673d5caDecode1(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA673d5caEncodeGithubComMaxbaldinDissertationProjectSrcImplementationUiEntity1(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjsonA673d5caEncode1(out, in.Data)
	}
	out.RawByte('}')
}
func easyjsonA673d5caDecode1(in *jlexer.Lexer, out *struct {
	Id     string `json:"id"`
	Parent string `json:"parent,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA673d5caEncode1(out *jwriter.Writer, in struct {
	Id     string `json:"id"`
	Parent string `json:"parent,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Parent != "" {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	out.RawByte('}')
}
