// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(in *jlexer.Lexer, out *StatsRow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hostname":
			out.Hostname = string(in.String())
		case "Process":
			easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity1(in, &out.Process)
		case "Packet":
			easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity2(in, &out.Packet)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(out *jwriter.Writer, in StatsRow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"Process\":"
		out.RawString(prefix)
		easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity1(out, in.Process)
	}
	{
		const prefix string = ",\"Packet\":"
		out.RawString(prefix)
		easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity2(out, in.Packet)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatsRow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatsRow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatsRow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatsRow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity(l, v)
}
func easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity2(in *jlexer.Lexer, out *Packet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SourceIp":
			out.SourceIp = string(in.String())
		case "SourcePort":
			out.SourcePort = int(in.Int())
		case "TargetIp":
			out.TargetIp = string(in.String())
		case "TargetPort":
			out.TargetPort = int(in.Int())
		case "Size":
			out.Size = uint(in.Uint())
		case "Packets":
			out.Packets = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity2(out *jwriter.Writer, in Packet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SourceIp\":"
		out.RawString(prefix[1:])
		out.String(string(in.SourceIp))
	}
	{
		const prefix string = ",\"SourcePort\":"
		out.RawString(prefix)
		out.Int(int(in.SourcePort))
	}
	{
		const prefix string = ",\"TargetIp\":"
		out.RawString(prefix)
		out.String(string(in.TargetIp))
	}
	{
		const prefix string = ",\"TargetPort\":"
		out.RawString(prefix)
		out.Int(int(in.TargetPort))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint(uint(in.Size))
	}
	{
		const prefix string = ",\"Packets\":"
		out.RawString(prefix)
		out.Uint(uint(in.Packets))
	}
	out.RawByte('}')
}
func easyjsonFf084a1fDecodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity1(in *jlexer.Lexer, out *Process) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Sender":
			out.Sender = bool(in.Bool())
		case "CommunicationWithKnownNode":
			out.CommunicationWithKnownNode = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf084a1fEncodeGithubComMaxbaldinDissertationProjectSrcImplementationAgentEntity1(out *jwriter.Writer, in Process) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Sender\":"
		out.RawString(prefix)
		out.Bool(bool(in.Sender))
	}
	{
		const prefix string = ",\"CommunicationWithKnownNode\":"
		out.RawString(prefix)
		out.Bool(bool(in.CommunicationWithKnownNode))
	}
	out.RawByte('}')
}
